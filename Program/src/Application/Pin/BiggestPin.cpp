//==============================================================================
//
// BiggestPin
// Author: Shimizu Shoji
//
//==============================================================================
//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
// include
//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
#include "BiggestPin.h"
#include "PinConfig.h"

//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
// const
//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
namespace {
  const float kFallingSpeed = 0.2f;
}

//==============================================================================
// class implementation
//==============================================================================
//------------------------------------------------
// ctor
//------------------------------------------------
BiggestPin::BiggestPin(const D3DXVECTOR3& position) : Pin(position), rotation_speed_(0.0f, 0.0f, 0.0f) {
  scale_ *= pin::biggest_pin::kScale;
}

//------------------------------------------------
// dtor
//------------------------------------------------
BiggestPin::~BiggestPin() {
}

//------------------------------------------------
// React collision
//------------------------------------------------
void BiggestPin::ReactCollision(const D3DXVECTOR3& power) {
  //D3DXVECTOR3 direction;
  //D3DXVec3Normalize(&direction, &power);
  rotation_speed_.x = kFallingSpeed;

  is_all_drawed_ = true;
  is_collided_ = true;
};

//------------------------------------------------
// Reset
//------------------------------------------------
void BiggestPin::Reset(void) {
  Pin::Reset();
  rotation_speed_ = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
}

//------------------------------------------------
// _Update
//------------------------------------------------
void BiggestPin::_Update(const float elapsed_time) {
  Pin::_Update(elapsed_time);

  rotation_ += rotation_speed_;
}
