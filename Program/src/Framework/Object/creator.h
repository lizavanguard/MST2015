//==============================================================================
//
// Creator
// Author: Shimizu Shoji
//
//==============================================================================
#pragma once
//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
// include
//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
#include <utility>

//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
// class definition
//--=----=----=----=----=----=----=----=----=----=----=----=----=----=----=----=
template<typename T>
class Creator {
public:
  template<typename ...Args>
  static T* Create(Args&&... args) {
    T* p = new T(std::forward<Args>(args)...);
    MY_BREAK_NULL_ASSERT(p);
    if (!p) {
      return nullptr;
    }

    return p;
  }
};
